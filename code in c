#include <ESP8266WiFi.h>

// Replace these with your network details
const char* ssid = "Your_SSID";
const char* password = "Your_PASSWORD";

// Authorized MAC addresses (whitelist)
const char* authorizedMAC[] = {
  "XX:XX:XX:XX:XX:XX", // Replace with actual MAC addresses
  "YY:YY:YY:YY:YY:YY"
};
const int authorizedCount = sizeof(authorizedMAC) / sizeof(authorizedMAC[0]);

// Function to check if the MAC is authorized
bool isAuthorized(const char* macAddress) {
  for (int i = 0; i < authorizedCount; i++) {
    if (strcmp(macAddress, authorizedMAC[i]) == 0) {
      return true;
    }
  }
  return false;
}

// Sniffer callback function
void packetSniffer(uint8_t* buffer, uint16_t length) {
  if (length < 12) return; // Ignore small packets

  // Extract source MAC address
  char macAddress[18];
  snprintf(macAddress, sizeof(macAddress), "%02X:%02X:%02X:%02X:%02X:%02X",
           buffer[10], buffer[11], buffer[12], buffer[13], buffer[14], buffer[15]);

  Serial.print("Detected MAC: ");
  Serial.println(macAddress);

  if (!isAuthorized(macAddress)) {
    Serial.println("Unauthorized device detected!");
    sendDeauthPacket(buffer + 10); // Send deauthentication frame
  }
}

// Function to send a deauthentication frame
void sendDeauthPacket(const uint8_t* mac) {
  uint8_t deauthPacket[26] = {
    0xC0, 0x00, 0x3A, 0x01, // Frame Control
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, // Broadcast Destination
    mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], // Source MAC
    mac[0], mac[1], mac[2], mac[3], mac[4], mac[5], // BSSID
    0x00, 0x00, 0x07, 0x00, // Fragment & Sequence number
    0x01, 0x00              // Reason Code
  };

  // Send the packet
  wifi_send_pkt_freedom(deauthPacket, sizeof(deauthPacket), 0);
  Serial.println("Deauth packet sent!");
}

void setup() {
  Serial.begin(115200);
  WiFi.mode(WIFI_STA); // Station mode
  WiFi.disconnect();  // Disable default Wi-Fi connection
  delay(100);

  // Enable promiscuous mode
  wifi_set_opmode(STATION_MODE);
  wifi_promiscuous_enable(1);
  wifi_set_promiscuous_rx_cb(packetSniffer);

  Serial.println("ESP8266 Intrusion Prevention System Initialized");
}

void loop() {
  // Main loop does nothing; everything is handled by the sniffer callback
}
